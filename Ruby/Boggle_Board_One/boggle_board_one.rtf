{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Medium;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red14\green115\blue192;
\red184\green14\blue61;\red247\green238\blue241;\red242\green242\blue242;\red83\green83\blue83;\red115\green0\blue2;
\red15\green112\blue1;\red51\green110\blue109;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww16340\viewh16580\viewkind0
\deftab720
\pard\pardeftab720\sl400\sa200

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We're going to create a basic Boggle board generator. Read about {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Boggle"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Boggle on Wikipedia}} if you're not familiar with the game.\cb1 \
\cb3 Boggle is a simple game, but when you get down into it there are some subtleties.\cb1 \
\cb3 First, we're only going to model the first part of boggle, where you place the Boggle dice and shake them around to create the initial board. To imagine what that might look like, visualize a blank 4x4 grid with a button next to it. When you push the button a letter appears in each of the 16 cells and you can begin playing Boggle.\cb1 \
\cb3 We're going to do it in two steps. First, we'll to build a dumb version which doesn't care at all about whether it's likely that the Boggle board will have English words. Second, we'll build a version that models the dice.\cb1 \
\pard\pardeftab720\sl400\sa200

\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Please Note:
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  Start with sample code from the original gist above. It gives a hint on class structure and internal methods.\cb1 \
\pard\pardeftab720\sl800\sa200

\f1\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 External Resources\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls1\ilvl0
\f0\fs28 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Boggle"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Boggle on Wikipedia}}\cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.wordplays.com/boggle"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Play Boggle online}}\cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl800\sa200

\f1\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Learning Goals\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls2\ilvl0
\f0\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Modeling a simple real-world procedure in Ruby\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Method definition, arguments, and return values\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Common string methods\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Internal representation vs. display representation\cb1 \
\pard\pardeftab720\sl800\sa200

\f1\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 As you're coding, ask yourself...\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls3\ilvl0
\f0\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do I have a clear understanding of how this procedure works?\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Am I stuck because I know what I want to do but don't know how to say it in Ruby?\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Am I stuck because my understanding of how Boggle works is too fuzzy or mistaken?\cb1 \
\pard\pardeftab720\sl800\sa200

\f1\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Objectives\cb1 \
\pard\pardeftab720\sl600\sa200

\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Stupid Boggle Board\cb1 \
\pard\pardeftab720\sl400\sa200

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Our 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 BoggleBoard
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  class has one core instance method: 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 shake!
\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\cb3 For the first step, focus on how you represent the board. 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 shake!
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  should modify the board, filling each cell with a random upper-case letter 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 A-Z
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cb1 \
\cb3 There are no other restrictions on the letters. They can appear multiple times, for example. Just pick a flippin' random letter and don't sweat it, ok?\cb1 \
\cb3 I also know you're worrying about how "Q" is always "Qu" in Boggle. Stop! Just let it be "Q" for now.\cb1 \
\cb3 We want to write code that works like this:\cb1 \
\pard\pardeftab720\sl320

\f2\fs24 \cf2 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 board \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 =\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  \cf9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 BoggleBoard\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 new\
\pard\pardeftab720\sl320
\cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 puts\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  board\
\pard\pardeftab720\sl320

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # An unshaken board prints out something sensible, like:
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # ____
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # ____
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # ____
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # ____
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # Shake (and modify) the board
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
board\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 shake!\
\
\pard\pardeftab720\sl320
\cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 puts\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  board\
\pard\pardeftab720\sl320

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # Prints out:
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # DUMV
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # KSPD
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # HCDA
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # ZOHG
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
board\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 shake!\
\pard\pardeftab720\sl320
\cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 puts\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  board\
\
\pard\pardeftab720\sl320

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # We've shaken again, so a new random board:
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # QIRZ
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # EEBY
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # OEJE
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f3\i \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 # MHCU
\f2\i0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl600\sa200

\f1\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Smart(er) Boggle Board\cb1 \
\pard\pardeftab720\sl400\sa200

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 We need to model the dice, now. Think carefully about how shaking a Boggle board works. Each die lands in one and only one cell, with one side facing up.\cb1 \
\cb3 Can you think of a way to model a die landing in only one cell without explicitly keeping track of which dice have landed and which haven't? One way to do this is using a secondary 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Array
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , can you think of another?\cb1 \
\cb3 We'll still only have one core method, 
\f2\fs22 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 BoggleBoard#shake!
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . Here's a list of Boggle dice, with "Q" representing "Qu":\cb1 \
\pard\pardeftab720\sl320

\f2\fs24 \cf2 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 AAEEGN\
ELRTTY\
AOOTTW\
ABBJOO\
EHRTVW\
CIMOTU\
DISTTY\
EIOSST\
DELRVY\
ACHOPS\
HIMNQU\
EEINSU\
EEGHNW\
AFFKPS\
HLNNRZ\
DEILRX\
\pard\pardeftab720\sl600\sa200

\f1\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Dealing with Q\cb1 \
\pard\pardeftab720\sl400\sa200

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Assuming we want "Qu" to be printed rather than "Q", how could we make that happen?\cb1 \
\cb3 There are several ways of making this happen, especially if you keep in mind that how the board appears to the computer \'97 how it's represented in your program \'97 doesn't have to be how it appears to the person using the program.\cb1 \
\cb3 Consider a few ways to make "Qu" print instead of just "Q", deliberate on the tradeoffs for a few minutes, and implement one. You'll probably want to change how the board is printed, too, since "Qu" will throw everything out of alignment.\cb1 \
\cb3 For example, something like this might be appropriate:\cb1 \
\pard\pardeftab720\sl320

\f2\fs24 \cf2 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 > puts board.shake!\
U  N  O  T  \
S  E  W  G  \
S  V  L  T  \
L  Qu C  F\
\pard\pardeftab720\sl400\sa200

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Check out the {\field{\*\fldinst{HYPERLINK "http://www.ruby-doc.org/core-1.9.3/String.html#method-i-ljust"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 String#ljust}} method for an easy way to add the right amount of space for display.\cb1 \
\pard\pardeftab720\sl360

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
}